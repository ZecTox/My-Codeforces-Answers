MOD = int(1e9 + 7)

# Precompute all three-digit primes
def precompute_primes():
    is_prime = [True] * 1000
    is_prime[0] = is_prime[1] = False
    for i in range(2, int(1000**0.5) + 1):
        if is_prime[i]:
            for j in range(i * i, 1000, i):
                is_prime[j] = False
    return is_prime

# Main function to compute the sum of all 10000-digit good numbers
def sum_of_good_numbers(n):
    primes = precompute_primes()
    dp = [[[0] * 10 for _ in range(10)] for _ in range(2)]

    # Initialize base case for single-digit numbers
    for d in range(1, 10):
        dp[0][0][d] = d

    # Fill DP table
    for i in range(2, n + 1):
        current = i % 2
        previous = 1 - current

        # Reset current layer
        for x in range(10):
            for y in range(10):
                dp[current][x][y] = 0

        for x in range(10):
            for y in range(10):
                if i == 2 and x == 0:  # Leading zeros not allowed
                    continue
                for z in range(10):
                    if not primes[x * 100 + y * 10 + z]:  # Check if (x, y, z) is prime
                        dp[current][y][z] += dp[previous][x][y] * 10 + dp[previous][x][y] * z
                        dp[current][y][z] %= MOD

    # Sum all 10000-digit numbers
    result = 0
    for x in range(10):
        for y in range(10):
            result = (result + dp[n % 2][x][y]) % MOD

    return result

# Solve for 10000-digit numbers
n = 10000
print(sum_of_good_numbers(n))
